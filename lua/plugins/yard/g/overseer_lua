return {
  {
    "stevearc/overseer.nvim",
    opts = {
      task_list = {
        direction = "bottom",
        min_height = 25,
        max_height = 25,
        default_detail = 1,
        bindings = {
          ["q"] = "<Cmd>OverseerClose<CR>",
          ["<CR>"] = "<Cmd>OverseerRun<CR>",
          ["<C-c>"] = "<Cmd>OverseerTaskAction<CR>",
        },
      },
      component_aliases = {
        default = {
          "on_output_window",
          "on_output_summarize",
          "on_exit_set_status",
          "on_complete_notify",
        },
      },
    },
    config = function(_, opts)
      local overseer = require("overseer")
      overseer.setup(opts)

      overseer.register_template({
        name = "Run Node.js",
        builder = function(params)
          return {
            cmd = { "node" },
            args = { params.file or vim.fn.expand("%:p") },
            name = "Node.js: " .. (params.file or vim.fn.expand("%:t")),
            components = { "default" },
          }
        end,
        desc = "Run a Node.js script",
        params = {
          file = {
            desc = "Path to the Node.js script",
            type = "string",
            optional = true,
          },
        },
        condition = {
          filetype = { "javascript", "typescript" },
        },
      })

      overseer.register_template({
        name = "npm run test",
        builder = function(params)
          return {
            cmd = { "npm" },
            args = { "run", "test" },
            name = "npm run test",
            cwd = params.cwd or vim.fn.getcwd(),
            components = { "default" },
          }
        end,
        desc = "Run npm test in the project directory",
        params = {
          cwd = {
            desc = "Working directory for npm test",
            type = "string",
            optional = true,
          },
        },
        condition = {
          callback = function()
            return vim.fn.filereadable("package.json") == 1
          end,
        },
      })

      overseer.register_template({
        name = "shell",
        builder = function(params)
          return {
            cmd = { params.command },
            args = params.args or {},
            name = "Shell: " .. params.command,
            components = { "default" },
          }
        end,
        desc = "Run a shell command",
        params = {
          command = {
            desc = "Shell command to execute",
            type = "string",
            default = "bash",
          },
          args = {
            desc = "Arguments for the shell command",
            type = "list",
            optional = true,
          },
        },
        generator = function(opts, cb)
          vim.ui.input({ prompt = "Enter shell command: ", default = "bash" }, function(input)
            if not input or input == "" then
              return cb(nil)
            end
            local args = vim.split(input, "%s+", { trimempty = true })
            local command = table.remove(args, 1)
            cb({
              name = "shell",
              params = {
                command = command,
                args = args,
              },
            })
          end)
        end,
      })
    end,
    keys = {
      { "<leader>ct", "<Cmd>OverseerToggle<CR>", desc = "Toggle Overseer Task List" },
      { "<leader>cr", "<Cmd>OverseerRun<CR>", desc = "Run Overseer Task" },
      { "<leader>ca", "<Cmd>OverseerTaskAction<CR>", desc = "Overseer Task Action" },
      { "<leader>cb", "<Cmd>OverseerBuild<CR>", desc = "Overseer Build" },
      { "<leader>cn", "<Cmd>OverseerRunCmd node %:p<CR>", desc = "Run Node.js Script" },
      { "<leader>cp", "<Cmd>OverseerRunCmd npm run test<CR>", desc = "Run npm test" },
      { "<leader>cs", "<Cmd>OverseerRun template=shell<CR>", desc = "Run Shell" },
    },
  },
}
